//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.skillConfig
{ 

public sealed partial class SkillConfig :  Bright.Config.BeanBase 
{
    public SkillConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsString) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["FlyText"].IsBoolean) { throw new SerializationException(); }  FlyText = _json["FlyText"]; }
        { if(!_json["Trigger"].IsString) { throw new SerializationException(); }  Trigger = _json["Trigger"]; }
        { if(!_json["SkillClass"].IsString) { throw new SerializationException(); }  SkillClass = _json["SkillClass"]; }
        { var __json0 = _json["AddPos"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; AddPos = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  AddPos[__index0++] = __v0; }   }
        { if(!_json["MaxRepeat"].IsNumber) { throw new SerializationException(); }  MaxRepeat = _json["MaxRepeat"]; }
        { if(!_json["RepeatType"].IsNumber) { throw new SerializationException(); }  RepeatType = _json["RepeatType"]; }
        { if(!_json["durationTime"].IsNumber) { throw new SerializationException(); }  DurationTime = _json["durationTime"]; }
        { var __json0 = _json["Lv1"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; Lv1 = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  Lv1[__index0++] = __v0; }   }
        { var __json0 = _json["Lv2"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; Lv2 = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  Lv2[__index0++] = __v0; }   }
        { var __json0 = _json["Lv3"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; Lv3 = new string[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  Lv3[__index0++] = __v0; }   }
        { var __json0 = _json["MaxCount"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; MaxCount = new int[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  MaxCount[__index0++] = __v0; }   }
        PostInit();
    }

    public SkillConfig(string id, string name, bool FlyText, string Trigger, string SkillClass, string[] AddPos, int MaxRepeat, int RepeatType, int durationTime, string[] Lv1, string[] Lv2, string[] Lv3, int[] MaxCount ) 
    {
        this.Id = id;
        this.Name = name;
        this.FlyText = FlyText;
        this.Trigger = Trigger;
        this.SkillClass = SkillClass;
        this.AddPos = AddPos;
        this.MaxRepeat = MaxRepeat;
        this.RepeatType = RepeatType;
        this.DurationTime = durationTime;
        this.Lv1 = Lv1;
        this.Lv2 = Lv2;
        this.Lv3 = Lv3;
        this.MaxCount = MaxCount;
        PostInit();
    }

    public static SkillConfig DeserializeSkillConfig(JSONNode _json)
    {
        return new skillConfig.SkillConfig(_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 技能名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 是否飘字
    /// </summary>
    public bool FlyText { get; private set; }
    /// <summary>
    /// 触发条件
    /// </summary>
    public string Trigger { get; private set; }
    /// <summary>
    /// 技能类
    /// </summary>
    public string SkillClass { get; private set; }
    /// <summary>
    /// buff位置
    /// </summary>
    public string[] AddPos { get; private set; }
    /// <summary>
    /// 最大叠加层数
    /// </summary>
    public int MaxRepeat { get; private set; }
    /// <summary>
    /// 叠加类型
    /// </summary>
    public int RepeatType { get; private set; }
    /// <summary>
    /// 持续时间
    /// </summary>
    public int DurationTime { get; private set; }
    /// <summary>
    /// 一级属性
    /// </summary>
    public string[] Lv1 { get; private set; }
    public string[] Lv2 { get; private set; }
    public string[] Lv3 { get; private set; }
    /// <summary>
    /// 每级最大触发次数
    /// </summary>
    public int[] MaxCount { get; private set; }

    public const int __ID__ = 625572952;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "FlyText:" + FlyText + ","
        + "Trigger:" + Trigger + ","
        + "SkillClass:" + SkillClass + ","
        + "AddPos:" + Bright.Common.StringUtil.CollectionToString(AddPos) + ","
        + "MaxRepeat:" + MaxRepeat + ","
        + "RepeatType:" + RepeatType + ","
        + "DurationTime:" + DurationTime + ","
        + "Lv1:" + Bright.Common.StringUtil.CollectionToString(Lv1) + ","
        + "Lv2:" + Bright.Common.StringUtil.CollectionToString(Lv2) + ","
        + "Lv3:" + Bright.Common.StringUtil.CollectionToString(Lv3) + ","
        + "MaxCount:" + Bright.Common.StringUtil.CollectionToString(MaxCount) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
